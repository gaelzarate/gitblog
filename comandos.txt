curso de git platzi


git init : inicializamos el proyecto de git

git status: muestra el estado de la rama

git add nombrearchivo: agrega el arcchivo listo para comit
git add. agrega todos los archivos que estan en ese directorio

git rm archivo: 

git rm --cached archivo: deshacer el add de ese archivo

git commit -m "mensaje del comit"

git config: muestara las configuraciones de git

un guion es para usar una letra dos guiones -- es para una palabra --help

//configurar el usuario para poder commitear
git config --global user.name "nombre de usuario"
git config --global user.email "correo@gmail.com"

code archivo: abre el archivo con visual studio codde 

git log nombrearchivo: muestra el historial de ese archivo

git show nombrearchivo: muestra los cambios mas recientes comparando el archivo modificado con el anterior

salir del show : q
git commit sin mensaje
salir del mensajepara commit: esc+shitf+zz
 
//para comparar dos commits en especifico
primero damos un git log y copiamos los codigos de los commit a comparar
git diff codigo1 codigo2 : compara lo que tenia en commit 1 con lo de commit2


git branch nombrerama: crea una nueva rama
git  checkout nombrerama: te mueves a la nueva rama

git reset codigo --hard: vuelve a ese estado todo y borra lo que tiene despues incluyendo el staging
git reset codigo --soft: vuelve a ese estado pero mantiene el staging
git reset head nombrearchivo: Este es el comando para sacar archivos del área de staging

git log --stat: muestra los cambios echos en cada commit

git checkout codigo_commit nombre_archivo: restaura el archivo a la version de ese commit
si queremos mantener esos cambios damos add y commit
git checkout master nombre_archivo: restaura el archivo a la version del ultimo commit de la rama master

git clone url: clona un repositorio remoto
git push: mandar mis cambios al repo remoto
git fetch: Lo usamos para traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local. 
git merge: También usamos el comando git merge con servidores remotos. Lo necesitamos para combinar los últimos cambios del servidor remoto y nuestro directorio de trabajo. 
git pull: Básicamente, git fetch y git merge al mismo tiempo.

git commit -am "mensaje": para saltarse el add
git commit -a: abre el vim, esc i: insertas el mensaje, esc shift+zz para salir

git branch nombrerama: crea la nueva rama
git checkout nombrerama: me mueve a la rama creada

fusion de ramas
git checkout master: me posiciono en la rama master 
git merge cabecera: traigo los cambios de la rama cabecera
git merge --abort: revertir merge

conflictos con merge. surgen cuando se hicieron cambios en el mismo lugar en diferentes ramas
al aparecer un conflicto visual studio nos permitira seleccionar que cambio deseamos mantener
despues commiteamos los cambios seleccionados manualmente y listo

Vincular git y github
crear un repositorio en nuestro github y copiar la url
git remote add origin URL: vincula nuestro git local con el repositorio
cuando es la primera vez en estos pasos nos pedira loguearnos para saber quien sube los cambios.
git remote -v: para verificar que estamos conectados al repositorio remoto
cambiamos el nombre de nuestrarama principal a main ya que github la maneja asi
git branch -M main

git push origin main: para subir nuestros cambios, pero si creamos un readme en el repositorios 
nos causara conflicto de historias, para solucionarlo se usa el siguiente comando;
git pull origin main --allow-unrelated-histories: solucionamos y nuevamente. git push origin main

tambien podemos hacer cambios y commits desde github solo damos en editar y listo
para actualizar nuestro archivo local podemos hacer; git pull origin main

git remote remove origin: elimina la conexion con el repositorio remoto(no lo he probado)
 
clonar un repositorio privado 
git clone https://TOKEN:x-oauth-basic@github.com/seseccoaxaca/sitiooficialsesecc1.0.git


cambiar de usuario local
git config -l: muestra mi configuracion local actual
git config --global user.email"example": cambia al nuevo nombre

master 1
